services:
  redis:
    image: redis:7.2
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - '6379:6379'
    networks:
      - ob-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    networks:
      - ob-network
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.5
    ports:
      - '15432:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    networks:
      - ob-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - ob-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.2
    command:
      - start-dev
      - '--import-realm'
    restart: unless-stopped
    environment:
      - KC_DB=${KC_DB}
      - KC_DB_URL_HOST=${KC_DB_URL_HOST}
      - KC_DB_URL_DATABASE=${KC_DB_URL_DATABASE}
      - KC_DB_PASSWORD=${KC_DB_PASSWORD}
      - KC_DB_USERNAME=${KC_DB_USERNAME}
      - KC_DB_SCHEMA=${KC_DB_SCHEMA}
      - KC_DB_URL=jdbc:postgresql://${KC_DB_URL_HOST}:5432/${KC_DB_URL_DATABASE}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - '8080:8080'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 15s
      timeout: 2s
      retries: 15
    volumes:
      - ./keycloak-config/realms/my-realm.json:/opt/keycloak/data/import/my-realm.json
    networks:
      - ob-network
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    user: "1000:1000"

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - '9090:9090'
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - ob-network
    user: "nobody"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    ports:
      - '3000:3000'
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/datasource:/etc/grafana/provisioning/datasources
    networks:
      - ob-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    user: "1000:1000"
    depends_on:
      prometheus:
        condition: service_healthy

  sonarqube:
    image: sonarqube:10.5.1-community
    hostname: sonarqube
    container_name: sonarqube
    depends_on:
      - postgres
    environment:
      - SONAR_JDBC_URL=${SONAR_JDBC_URL}
      - SONAR_JDBC_USERNAME=${SONAR_JDBC_USERNAME}
      - SONAR_JDBC_PASSWORD=${SONAR_JDBC_PASSWORD}
    volumes:
      - SonarQube_data:/opt/sonarqube/data
      - SonarQube_extensions:/opt/sonarqube/extensions
      - SonarQube_logs:/opt/sonarqube/logs
    ports:
      - '9000:9000'
    networks:
      - ob-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.57
    ports:
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '16686:16686'
      - '4317:4317'
      - '4318:4318'
      - '14250:14250'
      - '14269:14269'
      - '9411:9411'
    environment:
      - LOG_LEVEL=${LOG_LEVEL}
    networks:
      - ob-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:16686"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./grafana/loki-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/tmp/loki
    networks:
      - ob-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  tempo:
    image: grafana/tempo:2.5.0
    container_name: tempo
    ports:
      - '3200:3200'
      - '4319:4318'  # Mudando para 4319 para evitar conflito
    command: -config.file=/etc/tempo/local-config.yaml
    volumes:
      - ./grafana/tempo-config.yaml:/etc/tempo/local-config.yaml
      - tempo-data:/tmp/tempo
    networks:
      - ob-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3200/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  mimir:
    image: grafana/mimir:2.12.0
    container_name: mimir
    ports:
      - '9009:9009'
    command: -config.file=/etc/mimir/local-config.yaml
    volumes:
      - ./grafana/mimir-config.yaml:/etc/mimir/local-config.yaml
      - mimir-data:/tmp/mimir
    networks:
      - ob-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9009/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  ob-network:
    driver: bridge
    name: ob-network

volumes:
  postgresql_data:
  prometheus_data:
  grafana_datasource:
  SonarQube_data:
  SonarQube_extensions:
  SonarQube_logs:
  grafana-storage:
  postgresql:
  loki-data:
  tempo-data:
  mimir-data:
